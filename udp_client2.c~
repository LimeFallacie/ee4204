//
// Created by Emil on 20/10/2018.
//

#include "headsock.h"

float str_cli1(FILE *fp, int sockfd, struct sockaddr *addr, int addrlen, int *len);
void tv_sub(struct  timeval *out, struct timeval *in);	    //calculate the time interval between out and in

int main(int argc, char *argv[])
{
    int len;
    int sockfd;
    char **pptr;
    struct sockaddr_in ser_addr;
    struct hostent *sh;
    struct in_addr **addrs;
    float time;
    float transRate;


    FILE *fp;

    if (argc!= 2)
    {
        printf("parameters not match.");
        exit(0);
    }

    if ((sh=gethostbyname(argv[1]))==NULL) {             //get host's information
        printf("error when gethostbyname");
        exit(0);
    }

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);             //create socket
    if (sockfd<0)
    {
        printf("error in socket");
        exit(1);
    }

    addrs = (struct in_addr **)sh->h_addr_list;
    printf("canonical name: %s\n", sh->h_name);
    for (pptr=sh->h_aliases; *pptr != NULL; pptr++)
        printf("the aliases name is: %s\n", *pptr);			//printf socket information
    switch(sh->h_addrtype)
    {
        case AF_INET:
            printf("AF_INET\n");
            break;
        default:
            printf("unknown addrtype\n");
            break;
    }

    ser_addr.sin_family = AF_INET;
    ser_addr.sin_port = htons(MYUDP_PORT);
    memcpy(&(ser_addr.sin_addr.s_addr), *addrs, sizeof(struct in_addr));
    bzero(&(ser_addr.sin_zero), 8);

    if((fp = fopen ("myfile.txt","r+t")) == NULL) //opens the file to extract information to send.
    {
        printf("File doesn't exit\n");
        exit(0);
    }

    time = str_cli1(fp, sockfd, (struct sockaddr *)&ser_addr, sizeof(struct sockaddr_in), &len);   // receive and send
    transRate = len / ((float)time);

    printf("Time: %.3f ms | Data sent: %d bytes | Data Rate | %f bps\n",time, (int)len, transRate);

    close(sockfd);
    fclose(fp);
    exit(0);
}

float str_cli1(FILE *fp, int sockfd, struct sockaddr *addr, int addrlen, int *len)
{
    char sends[2*DATALEN];
    char *c;

    long filesize = 0;
    long cursor = 0;

    int n = 0;
    int sendLength = 0;

    struct ack_so ack;
    struct timeval timeSend;
    struct timeval timeRcv;

    float time_t = 0.0;

    fseek(fp, 0, SEEK_END);
    filesize = ftell(fp);
    rewind(fp);
    printf("The file length is %d bytes\n", (int)filesize);
    printf("the data unit is %d bytes\n",DATALEN);

    // allocate memory to contain the whole file.
    c = (char *) malloc (filesize);
    if (c == NULL) exit (2);

    // copy the file into the buffer.
    fread (c,1, filesize,fp);

    /*** the whole file is loaded in the buffer. ***/
    c[filesize] ='\0';									//append the end byte
    gettimeofday(&timeSend, NULL);							//get the current time
    int acked = 1;
    int alt = 0; //1 => 2*DU

    while(cursor <= filesize) {
        if (acked) {
            if ((filesize - cursor + 1) < 2 * DATALEN && alt) {
                sendLength = filesize - cursor + 1;
            } else if ((filesize - cursor + 1) < DATALEN && !alt) {
                sendLength = filesize - cursor + 1;
            } else {
                alt = (alt + 1) % 2;
                sendLength = (alt + 1) * DATALEN;
            }
        }
        //printf("slen = %d\n", sendLength);
        memcpy(sends, (c + cursor), sendLength);
        if ((n = sendto(sockfd, &sends, sendLength, 0, addr, addrlen)) == -1) {
            if (n < 0) {
                printf("error in send\n");
            }
        }

        acked = 0; //await ack

        if (!acked) {
            if (n = recvfrom(sockfd, &ack, 2, 0, addr, &addrlen) == -1) {
                printf("error when receiving\n");
                exit(1);
            } else {
                if (ack.num && !ack.len) {
                    //printf("received ack\n");
                    acked = 1;
                    cursor += sendLength;
                    //printf("cursor: %d\n", (int)cursor);
                }
            }
        }
    }

    *len = cursor;

    gettimeofday(&timeRcv, NULL);
    tv_sub(&timeRcv, &timeSend);
    time_t += (timeRcv.tv_sec)*1000.0 + (timeRcv.tv_usec)/1000.0;
    printf("time taken: %.3f", time_t);
    return time_t;
}

void tv_sub(struct  timeval *out, struct timeval *in) //tcp client 3
{
    if ((out->tv_usec -= in->tv_usec) <0)
    {
        --out ->tv_sec;
        out ->tv_usec += 1000000;
    }
    out->tv_sec -= in->tv_sec;
}
